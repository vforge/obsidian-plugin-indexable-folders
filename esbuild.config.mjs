import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin:
https://github.com/vforge/obsidian-plugin-indexable-folders
*/
`;

const prod = (process.argv[2] === "production");

// Plugin to resolve path aliases (src/* imports)
const pathAliasPlugin = {
	name: "path-alias",
	setup(build) {
		// Resolve imports starting with 'src/'
		build.onResolve({ filter: /^src\// }, (args) => {
			// Extract the path after 'src/' prefix
			const modulePath = args.path.slice(4); // Remove 'src/' prefix

			// Build the full absolute path
			const baseAbsolutePath = path.resolve(__dirname, 'src', modulePath);

			// Try common TypeScript/JavaScript file extensions
			const extensions = ['.ts', '.tsx', '.js', '.jsx', '.mjs'];

			for (const ext of extensions) {
				const pathWithExt = baseAbsolutePath + ext;
				if (fs.existsSync(pathWithExt)) {
					return { path: pathWithExt };
				}
			}

			// Check if it's a directory with an index file
			for (const ext of extensions) {
				const indexPath = path.join(baseAbsolutePath, `index${ext}`);
				if (fs.existsSync(indexPath)) {
					return { path: indexPath };
				}
			}

			// If no file found with extensions, check if the path exists as-is
			if (fs.existsSync(baseAbsolutePath)) {
				return { path: baseAbsolutePath };
			}

			// Let esbuild handle the error if file doesn't exist
			return { path: baseAbsolutePath };
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2021",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	plugins: [pathAliasPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
